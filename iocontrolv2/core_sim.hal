# core HAL config file for simulation

loadusr haltalk

# first load all the RT modules that will be needed
# kinematics
loadrt trivkins
# trajectory planner
loadrt tp
# motion controller, get name and thread periods from ini file
loadrt [EMCMOT]EMCMOT base_period_nsec=[EMCMOT]BASE_PERIOD servo_period_nsec=[EMCMOT]SERVO_PERIOD num_joints=[TRAJ]AXES kins=trivkins tp=tp num_aio=6 num_dio=2
# load 6 differentiators (for velocity and accel signals
loadrt ddt names=ddt_x,ddt_xv,ddt_y,ddt_yv,ddt_z,ddt_zv
# load additional blocks
loadrt hypot names=vel_xy,vel_xyz

# add motion controller functions to servo thread
addf motion-command-handler servo-thread
addf motion-controller servo-thread
# link the differentiator functions into the code
addf ddt_x servo-thread
addf ddt_xv servo-thread
addf ddt_y servo-thread
addf ddt_yv servo-thread
addf ddt_z servo-thread
addf ddt_zv servo-thread
addf vel_xy servo-thread
addf vel_xyz servo-thread

# create HAL signals for position commands from motion module
# loop position commands back to motion module feedback
net Xpos axis.0.motor-pos-cmd => axis.0.motor-pos-fb ddt_x.in
net Ypos axis.1.motor-pos-cmd => axis.1.motor-pos-fb ddt_y.in
net Zpos axis.2.motor-pos-cmd => axis.2.motor-pos-fb ddt_z.in

# send the position commands thru differentiators to
# generate velocity and accel signals
net Xvel ddt_x.out => ddt_xv.in vel_xy.in0
net Xacc <= ddt_xv.out
net Yvel ddt_y.out => ddt_yv.in vel_xy.in1
net Yacc <= ddt_yv.out
net Zvel ddt_z.out => ddt_zv.in vel_xyz.in0
net Zacc <= ddt_zv.out

# Cartesian 2- and 3-axis velocities
net XYvel vel_xy.out => vel_xyz.in1
net XYZvel <= vel_xyz.out

# estop loopback
net estop-loop iocontrol.0.user-enable-out iocontrol.0.emc-enable-in

# create signals for tool loading loopback
net tool-prep-loop iocontrol.0.tool-prepare iocontrol.0.tool-prepared
net tool-change-loop iocontrol.0.tool-change iocontrol.0.tool-changed

loadrt fake_ext
addf fake-ext.0 servo-thread

net fake-ext motion.analog-out-05 => fake-ext.0.cross
net zero-trigger motion.digital-out-00 => fake-ext.0.zero-trigger
net Xpos => fake-ext.0.x-pos
net Ypos => fake-ext.0.y-pos
net Xvel => fake-ext.0.x-vel
net Yvel => fake-ext.0.y-vel

loadrt oneshot names=oneshot.test
addf oneshot.test servo-thread

net test-trigger <= motion.digital-out-01
net test-trigger => oneshot.test.in
net feed-hold <= oneshot.test.out
net feed-hold => motion.feed-hold
setp oneshot.test.rising 1
setp oneshot.test.falling 1
setp oneshot.test.retriggerable 1
setp oneshot.test.width 0.016

newcomp fdm-ve-jog timer=100
newpin fdm-ve-jog fdm-ve-jog.distance       float io
newpin fdm-ve-jog fdm-ve-jog.velocity       float io
newpin fdm-ve-jog fdm-ve-jog.direction      bit   io
newpin fdm-ve-jog fdm-ve-jog.trigger        bit   io
newpin fdm-ve-jog fdm-ve-jog.continous      bit   out
newpin fdm-ve-jog fdm-ve-jog.dtg            float in
newpin fdm-ve-jog fdm-ve-jog.max-velocity   float in
ready  fdm-ve-jog

setp fdm-ve-jog.max-velocity 10
